
// common.js
const jsTools = {
    getNumber: function (str) {
        return parseInt(str.replace(/\s/g, ''));
    },
    getWindowWidth: function () {
        return document.documentElement.clientWidth;
    },
    getNumberFormat: function (number, decimals, dec_point, thousands_sep) {
        var i, j, kw, kd, km;
        if (isNaN(decimals = Math.abs(decimals))) {
            decimals = 2;
        }
        if (dec_point == undefined) {
            dec_point = ",";
        }
        if (thousands_sep == undefined) {
            thousands_sep = ".";
        }
        i = parseInt(number = (+number || 0).toFixed(decimals)) + "";
        if ((j = i.length) > 3) {
            j = j % 3;
        } else {
            j = 0;
        }
        km = (j ? i.substr(0, j) + thousands_sep : "");
        kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);
        kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");
        return km + kw + kd;
    },
    imagesResize: function (src) {
        let img = document.querySelectorAll('img');

        for (let i=0;i<img.length;i++){
            img[i].src = src;
        }
    }
};
function getTemplate(select, data = [], placeholder = 'Placeholder по умолчанию', selectedId) {

    let items = data.map(function (item) {
        let cls = '';
        if (item.id == selectedId) {
            cls = 'selected';
        }
        return `<div class="smv-select__item ${cls}" data-type="item" data-id="${item.id}">${item.value.outerHTML}</div>`;
    });

    return `<div class="smv-select">   
                ${select.outerHTML}
                <div class="smv-select__backdrop" data-type="backdrop"></div>
                <div class="smv-select__input" data-type="input">
                    <span class="smv-select__placeholder">${placeholder}</span>
                    <svg class="smv-select__arrow" xmlns="http://www.w3.org/2000/svg" width="284.929px" height="284.929px" viewBox="0 0 284.929 284.929">
                        <path d="M282.082,76.511l-14.274-14.273c-1.902-1.906-4.093-2.856-6.57-2.856c-2.471,0-4.661,0.95-6.563,2.856L142.466,174.441
    \t\t            L30.262,62.241c-1.903-1.906-4.093-2.856-6.567-2.856c-2.475,0-4.665,0.95-6.567,2.856L2.856,76.515C0.95,78.417,0,80.607,0,83.082
                        c0,2.473,0.953,4.663,2.856,6.565l133.043,133.046c1.902,1.903,4.093,2.854,6.567,2.854s4.661-0.951,6.562-2.854L282.082,89.647
    \t\t            c1.902-1.903,2.847-4.093,2.847-6.565C284.929,80.607,283.984,78.417,282.082,76.511z"/>
                    </svg>
                </div>
                <div class="smv-select__dropdown">
                    <div class="smv-select__list">
                        ${items.join('')}
                    </div>
                </div>
            </div>`
}

class Select {

    constructor(obj,selector, options) {
        this.$select = obj;
        this.options = options;
        this.selectedId = options.selectedId;
        this.selectedValue = options.selectedValue;
        this.#parse();
        this.#render(selector);
        this.#setup();
    }

    #parse() {
        this.options.data = Array.apply(null, this.options.dataItems).map((el,index) => {
            return {id: index, value:el};
        });
    }

    #render(selector) {
        const {placeholder, data, selectedId} = this.options
        let parent = this.$select.parentNode;

        parent.innerHTML = getTemplate(this.$select, data, placeholder, selectedId);
        this.$main = parent.querySelector('.smv-select');
        this.$select = this.$main.querySelector(selector);
        this.$placeholder = this.$main.querySelector('.smv-select__placeholder');
        if (selectedId) {
            this.select(selectedId);
        }
    }

    #setup() {
        this.clickHandler = this.clickHandler.bind(this);
        this.$main.addEventListener('click', this.clickHandler);

        this.focusHandler = this.focusHandler.bind(this);
        this.$main.addEventListener('focusin', this.focusHandler);
        this.$main.addEventListener('focusout', this.focusHandler);

        this.changeHandler = this.changeHandler.bind(this);
        this.$main.addEventListener('change', this.changeHandler);
    }

    clickHandler(e) {

        let {type, id} = e.target.dataset;

        switch (type) {
            case 'input':
                this.toggle();
                break;
            case 'item':

                this.select(id);
            case 'backdrop':
                this.close();
                this.focusout();
                break;
        }
    }

    focusHandler(e) {
        this[e.type]();
    }

    changeHandler(e) {
        this.selectedValue = e.target.value;
        this.select(this.getByValue.id);
    }

    get isOpen() {
        return this.$main.classList.contains('open');
    }

    get current() {
        return this.options.data.find(item => item.id == this.selectedId);
    }

    get getByValue() {
        return this.options.data.find(item => item.value == this.selectedValue);
    }

    toggle() {
        if (this.isOpen) {
            this.close();
        } else {
            this.open();
        }
    }

    open() {
        this.$main.classList.add('open');
        this.focusin();
    }

    close() {
        this.$main.classList.remove('open');
    }

    select(id) {
        this.selectedId = id;
        let {value} = this.current;
        this.$placeholder.innerHTML = value.outerHTML;
        // this.$select.value = value;
        // debugger;
        this.$main.querySelector('.selected').classList.remove('selected');
        this.$main.querySelector(`[data-id="${id}"]`).classList.add('selected');
        this.close();

        this.options.onSelect = this.options.onSelect.bind(this);
        this.options.onSelect ? this.options.onSelect() : null
    }

    focusin() {
        this.$main.classList.add('focus');
    }

    focusout() {
        this.$main.classList.remove('focus');
    }

}
function Popup() {
    let popup = this,
        modal = document.createElement('div'),
        wrap = document.createElement('div'),
        form = document.createElement('div'),
        close = document.createElement('button');

    close.innerHTML = '<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M0.43934 0.43934C-0.146447 1.02513 -0.146447 1.97487 0.43934 2.56066L15.4393 17.5607C16.0251 18.1464 16.9749 18.1464 17.5607 17.5607C18.1464 16.9749 18.1464 16.0251 17.5607 15.4393L2.56066 0.43934C1.97487 -0.146447 1.02513 -0.146447 0.43934 0.43934Z" fill="#DADADA"/><path fill-rule="evenodd" clip-rule="evenodd" d="M17.5607 0.43934C18.1464 1.02513 18.1464 1.97487 17.5607 2.56066L2.56066 17.5607C1.97487 18.1464 1.02513 18.1464 0.43934 17.5607C-0.146446 16.9749 -0.146446 16.0251 0.43934 15.4393L15.4393 0.43934C16.0251 -0.146447 16.9749 -0.146447 17.5607 0.43934Z" fill="#DADADA"/></svg>';

    // adds class
    close.classList.add('popup__close');
    form.classList.add('popup__form');
    wrap.classList.add('popup__wrap');
    modal.classList.add('popup');

    // appends
    wrap.append(close);
    wrap.append(form);
    modal.append(wrap);
    document.body.append(modal);

    this.open = function (content) {
        let html = getHtml(content);
        form.innerHTML = html;
        modal.classList.add('active');
        popup.setOverflow();
    };

    this.close = function () {
        form.innerHTML = '';
        modal.classList.remove('active');
        popup.removeOverflow();
    };

    this.setOverflow = function (){
        document.body.classList.add('ovh');
    }

    this.removeOverflow = function (){
        document.body.classList.remove('ovh');
    }

    function getHtml(content){
        let type = typeof content;

        if (type=='string'){
            return content;
        } else {
            return content.outerHTML;
        }
    }

    modal.addEventListener('click', function (e){
        if (!e.target.closest('.popup__wrap')){
            popup.close();
        }
    });
    close.addEventListener('click', popup.close);
}

function Template(settings,current){
    let tmpl = this;
    if (settings.parent){
        let parent = current.closest(settings.parent);
        this.template = parent.querySelector(settings.template).content;
    } else{
        this.template = document.querySelector(settings.template).content;
    }
    this.content = this.template.querySelector(settings.content);

    this.html = function (){
        return tmpl.content.outerHTML;
    }
}

//index.js
(function () {

    $('input[type=tel]').mask('+7 (999) 999-99-99');

    //TABS
    let $jsTabs = $('.jsTabs');

    $jsTabs.each(function (x, i) {
        let $jsTab = $(i),
            $tabs = $jsTab.find('.jsTab'),
            $sws = $jsTab.find('.jsSw');

        $sws.on('click', function (e) {
            let sw = $(this),
                index = $sws.index(sw),
                tab = $($tabs[index]);

            $sws.removeClass('active');
            $tabs.removeClass('active');
            sw.addClass('active');
            tab.addClass('active');

        });

    });

    //FAQ
    let faqs = $('.jsFaq');

    faqs.on('click', function (e){
        $this = $(this);
       faqs.not($this).removeClass('active');
        $this.toggleClass('active');
    });

    $(window).on('click', function (e){
       let target = e.target;

       if(!target.closest('.faq__item')){
           faqs.removeClass('active');
       }
    });


    //SWIPERS
    const swiperPrice = new Swiper('.price__container', {
        slidesPerView: '1',
        spaceBetween: 20,
        watchSlidesVisibility: true,
        slideVisibleClass: 'pslide_visible',
        // Navigation arrows
        navigation: {
            nextEl: '.price__next',
            prevEl: '.price__prev',
        },
        on: {
            init: function (event, args) {
                let arr = this.slides.filter(i => i.classList.contains('pslide_visible'));
                syncSliderPrice(arr);
            },
            slideChange: function () {
                let arr = this.slides.filter(i => i.classList.contains('pslide_visible'));
                syncSliderPrice(arr);
            },
        },
        breakpoints: {
            // when window width is >= 768px
            768: {
                slidesPerView: 2,
                spaceBetween: 20
            },
            // when window width is >= 480px
            1200: {
                slidesPerView: '3',
                spaceBetween: 20,
            },
        }
    });

    window.swiperPrice = swiperPrice;

    $('.pcomp__item').on('click', function (e) {
        swiperPrice.slideTo(this.dataset.id);
    });


    const resultsSwiperThumbs = new Swiper('.rthumbs__container', {
        spaceBetween: 20,
        slidesPerView: 3,
        watchSlidesVisibility: true,
        breakpoints: {
            // when window width is >= 768px
            768: {
                slidesPerView: 4,
                spaceBetween: 20
            },
            // when window width is >= 480px
            1200: {
                slidesPerView: 6,
                spaceBetween: 20,
            },
        }
    });

    const resultsSwiper = new Swiper('.rslider', {
        spaceBetween: 40,
        effect: 'fade',
        navigation: {
            nextEl: '.rthumbs__next',
            prevEl: '.rthumbs__prev',
        },
        thumbs: {
            swiper: resultsSwiperThumbs
        },
    });

    const dsliders = document.querySelectorAll('.dslider');

    dsliders.forEach(function (dslider,index) {

        new Swiper(dslider, {
            navigation: {
                nextEl: '.dslider_'+(index+1)+' .dslider__next',
                prevEl: '.dslider_'+(index+1)+' .dslider__prev'
            },
        });
    });

    const revsSwiper = new Swiper('.revs__container', {
        spaceBetween: 10,
        navigation: {
            nextEl: '.revs__next',
            prevEl: '.revs__prev',
        },
    });

    const weSwiper = new Swiper('.we__container', {
        slidesPerView: 1.5,
        autoplay: {
            delay: 5000,
        },
        breakpoints: {
            // when window width is >= 768px
            768: {
                slidesPerView: 2.5,
            },
            // when window width is >= 480px
            1200: {
                slidesPerView: 4,
            },
        }
    });


    //TIPPY
    tippy(document.querySelectorAll('.how .jsTippy'),
        {
            content: (reference) => reference.getAttribute('title'),
            trigger: 'click',
            theme: 'light',
        });

    //FUNCTIONS
    function syncSliderPrice(arr) {
        $('.pcomp__item').removeClass('active');

        arr.forEach(function (item) {
            $('.pcomp__item[data-id=' + item.dataset.id + ']').addClass('active');
        });


    }

    //POPUP
    let popup = new Popup();
    $('.jsCall').on('click', function (e){

        let data = {
            template: '.template',
            content: '.callorder'
        }

        let html = new Template(data, this).html();
        popup.open(html);

        $(data.content).validate({
            onfocusout: false,
            submitHandler: function (form) {
                $(form).find('.form__error').removeClass('active');

                let data = $(form).serialize(),
                    url = $(form).attr('action');

                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: url,
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            $(form).append(new Template({
                                template: '.template',
                                content: '.success'
                            }).html());
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });


            },
            invalidHandler: function (event, validator) {
                $(this).find('.form__error').addClass('active');
            },
        });
        $('input[type=tel]').mask('+7 (999) 999-99-99');

    });

    $('.what__form').validate({
        onfocusout: false,
        submitHandler: function (form) {
            let data = $(form).serialize(),
                url = $(form).attr('action');

            $.ajax({
                dataType: "json",
                type: "POST",
                url: url,
                data: data,
                success: function (result) {
                    if (result.status) {

                        let data = {
                            template: '.template',
                            content: '.success'
                        }
                        let html = new Template(data, this).html();
                        popup.open(html);
                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });


        },
        invalidHandler: function (event, validator) {
            $(this).find('.form__error').addClass('active');
        },
    });

    //SELECT
    let selects = document.querySelectorAll('.jsSelect');

    selects.forEach(function (select){
        new Select(select,'.jsSelect',{
            selectedId: '1',
            dataItems: document.querySelectorAll('.jsSelectItem'),
            onSelect() {
                console.log('Selected Item', this.current)
            }
        });
    });


}());